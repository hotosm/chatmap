{"version":3,"file":"telegram-naMZCWTL.js","sources":["../../src/parsers/telegram.js"],"sourcesContent":["\n/**\n * Contains a main parser function and supporting fuctions\n * for creating a map from a Telegram conversation log.\n *\n * The Map is stored in memory as a GeoJSON and a list\n * of media files\n */\n\nimport { getClosestMessage, getClosestNextMessage, getClosestPrevMessage } from \"./chatmap\";\n\nfunction stripPath(filename) {\n    return filename.substring(filename.lastIndexOf(\"/\") + 1, filename.length);\n}\n\n// Parse time, username and message\nconst parseMessage = (line) => {\n    let text = \"\";\n    let msgObject = {\n        time: parseTimeString(line.date),\n        username: line.from,\n    };\n    if (Array.isArray(line.text)) {\n        line.text.forEach(item => {\n            if (item.type === \"link\") {\n                text = item.text;\n            }\n        });\n    } else if (line.text !== \"\") {\n        text = line.text;\n    }\n    msgObject.message = text;\n\n    if (line.location_information) {\n        msgObject.location = [line.location_information.latitude, line.location_information.longitude]; \n    }\n    if (line.photo) {\n        msgObject.file = stripPath(line.photo);\n    }\n    if (line.file && line.mime_type === \"video/mp4\") {\n        msgObject.file = stripPath(line.file);\n    }\n    return msgObject;\n}\n\n// Parse time strings\nconst parseTimeString = (dateStr) => {\n    return new Date(dateStr);\n}\n\n// Parse messages from lines and create an index\nconst parseAndIndex = (lines) => {\n    let index = 0;\n    const result = {};\n    lines.forEach((line) => {\n        const msg = parseMessage(line);\n        if (msg) {\n            result[index] = msg;\n            index++;\n        }\n    })\n    return result;\n}\n\nexport default function telegramParser({ text, msgPosition }) {\n    if (!text) return;\n    const json = JSON.parse(text);\n    const geoJSON = {\n        type: \"FeatureCollection\",\n        features: []\n    };\n\n    // Creates an indexed dictionary for messages\n    const messages = parseAndIndex(json.messages);\n    const msgObjects = Object.values(messages);\n\n    msgObjects.forEach((msgObject, index) => {\n        if (msgObject.location) {\n            let featureObject = {\n                type: \"Feature\",\n                properties: {},\n                geometry: {\n                    type: \"Point\",\n                    coordinates: [\n                        msgObject.location[1],\n                        msgObject.location[0]\n                    ]\n                }\n            }\n            let message;\n            switch (msgPosition) {\n                case \"before\":\n                    message = getClosestPrevMessage(messages, index);\n                    break;\n                case \"after\":\n                    message = getClosestNextMessage(messages, index);\n                    break;\n                default:\n                    message = getClosestMessage(messages, index);\n                break;\n            }\n            featureObject.properties = {...message};\n            geoJSON.features.push(featureObject);\n        }\n    });\n\n    return geoJSON;\n}\n"],"names":["stripPath","filename","parseMessage","line","text","msgObject","parseTimeString","item","dateStr","parseAndIndex","lines","index","result","msg","telegramParser","msgPosition","json","geoJSON","messages","featureObject","message","getClosestPrevMessage","getClosestNextMessage","getClosestMessage"],"mappings":"wDAWA,SAASA,EAAUC,EAAU,CACzB,OAAOA,EAAS,UAAUA,EAAS,YAAY,GAAG,EAAI,EAAGA,EAAS,MAAM,CAC5E,CAGA,MAAMC,EAAgBC,GAAS,CAC3B,IAAIC,EAAO,GACPC,EAAY,CACZ,KAAMC,EAAgBH,EAAK,IAAI,EAC/B,SAAUA,EAAK,IAClB,EACD,OAAI,MAAM,QAAQA,EAAK,IAAI,EACvBA,EAAK,KAAK,QAAQI,GAAQ,CAClBA,EAAK,OAAS,SACdH,EAAOG,EAAK,KAE5B,CAAS,EACMJ,EAAK,OAAS,KACrBC,EAAOD,EAAK,MAEhBE,EAAU,QAAUD,EAEhBD,EAAK,uBACLE,EAAU,SAAW,CAACF,EAAK,qBAAqB,SAAUA,EAAK,qBAAqB,SAAS,GAE7FA,EAAK,QACLE,EAAU,KAAOL,EAAUG,EAAK,KAAK,GAErCA,EAAK,MAAQA,EAAK,YAAc,cAChCE,EAAU,KAAOL,EAAUG,EAAK,IAAI,GAEjCE,CACX,EAGMC,EAAmBE,GACd,IAAI,KAAKA,CAAO,EAIrBC,EAAiBC,GAAU,CAC7B,IAAIC,EAAQ,EACZ,MAAMC,EAAS,CAAE,EACjB,OAAAF,EAAM,QAASP,GAAS,CACpB,MAAMU,EAAMX,EAAaC,CAAI,EACzBU,IACAD,EAAOD,CAAK,EAAIE,EAChBF,IAEP,CAAA,EACMC,CACX,EAEe,SAASE,EAAe,CAAE,KAAAV,EAAM,YAAAW,GAAe,CAC1D,GAAI,CAACX,EAAM,OACX,MAAMY,EAAO,KAAK,MAAMZ,CAAI,EACtBa,EAAU,CACZ,KAAM,oBACN,SAAU,CAAA,CACb,EAGKC,EAAWT,EAAcO,EAAK,QAAQ,EAG5C,OAFmB,OAAO,OAAOE,CAAQ,EAE9B,QAAQ,CAACb,EAAWM,IAAU,CACrC,GAAIN,EAAU,SAAU,CACpB,IAAIc,EAAgB,CAChB,KAAM,UACN,WAAY,CAAE,EACd,SAAU,CACN,KAAM,QACN,YAAa,CACTd,EAAU,SAAS,CAAC,EACpBA,EAAU,SAAS,CAAC,CAC5C,CACA,CACA,EACgBe,EACJ,OAAQL,EAAW,CACf,IAAK,SACDK,EAAUC,EAAsBH,EAAUP,CAAK,EAC/C,MACJ,IAAK,QACDS,EAAUE,EAAsBJ,EAAUP,CAAK,EAC/C,MACJ,QACIS,EAAUG,EAAkBL,EAAUP,CAAK,EAC/C,KAChB,CACYQ,EAAc,WAAa,CAAC,GAAGC,CAAO,EACtCH,EAAQ,SAAS,KAAKE,CAAa,CAC/C,CACA,CAAK,EAEMF,CACX"}